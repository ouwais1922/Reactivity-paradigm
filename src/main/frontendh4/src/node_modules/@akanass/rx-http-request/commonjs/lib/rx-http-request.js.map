{"version":3,"file":"rx-http-request.js","sourceRoot":"","sources":["../../../src/lib/rx-http-request.ts"],"names":[],"mappings":"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","sourcesContent":["// import libraries\nimport * as request from 'request';\nimport { Buffer } from 'buffer';\n\nimport { merge, Observable, of, throwError } from 'rxjs';\nimport { filter, flatMap, map, tap } from 'rxjs/operators';\n\n\nimport { Cookie, RxCookieJar } from './rx-cookie-jar';\nimport RequestAPI = request.RequestAPI;\nimport Request = request.Request;\nimport CoreOptions = request.CoreOptions;\nimport RequiredUriUrl = request.RequiredUriUrl;\nimport RequestResponse = request.RequestResponse;\nimport RequestCallback = request.RequestCallback;\n\n// native javascript's objects typings\ndeclare const Object: any;\n\n/**\n * Class definition\n */\nexport class RxHttpRequest {\n    // private property to store singleton instance\n    private static _instance: RxHttpRequest;\n    // private property to store request API object\n    private readonly _request: RequestAPI<Request, CoreOptions, RequiredUriUrl>;\n\n    /**\n     * Returns singleton instance\n     *\n     * @return {RxHttpRequest}\n     */\n    static instance(): RxHttpRequest {\n        if (!(RxHttpRequest._instance instanceof RxHttpRequest)) {\n            RxHttpRequest._instance = new RxHttpRequest(request);\n        }\n\n        return RxHttpRequest._instance;\n    }\n\n    /**\n     * Class constructor\n     */\n    constructor(req: RequestAPI<Request, CoreOptions, RequiredUriUrl>) {\n        // check request parameter\n        this._checkRequestParam(req);\n\n        // set request object\n        this._request = req;\n    }\n\n    /**\n     * Returns private attribute _request\n     *\n     * @return {RequestAPI<Request, CoreOptions, RequiredUriUrl>}\n     */\n    get request(): RequestAPI<Request, CoreOptions, RequiredUriUrl> {\n        return this._request;\n    }\n\n    /**\n     * This method returns a wrapper around the normal rx-http-request API that defaults to whatever options\n     * you pass to it.\n     * It does not modify the global rx-http-request API; instead, it returns a wrapper that has your default settings\n     * applied to it.\n     * You can _call .defaults() on the wrapper that is returned from rx-http-request.defaults to add/override defaults\n     * that were previously defaulted.\n     *\n     * @param options\n     *\n     * @return {RxHttpRequest}\n     */\n    defaults(options: CoreOptions): RxHttpRequest {\n        return new RxHttpRequest(this._request.defaults(options));\n    }\n\n    /**\n     * Function to do a GET HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     */\n    get<R = any>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>this._call<R>('get', <string>uri,\n            <CoreOptions>Object.assign({}, options || {}));\n    }\n\n    /**\n     * Function to do a GET HTTP request and to return a buffer\n     *\n     * @param uri\n     * @param options\n     *\n     * @return {Observable<RxHttpRequestResponse<Buffer>>}\n     */\n    getBuffer<R = Buffer>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<Buffer>> {\n        return <Observable<RxHttpRequestResponse<Buffer>>>new Observable((observer) => {\n            try {\n                this._request.get(<string>uri, <CoreOptions>Object.assign({}, options || {}))\n                    .on('response', (response: RequestResponse) => {\n                        let res: Buffer;\n                        response.on('data', (data: Buffer) => res = res ? Buffer.concat([].concat(res, data)) : data);\n                        response.on('end', () => {\n                            observer.next(<RxHttpRequestResponse<Buffer>>Object.assign({}, {\n                                response: <RequestResponse>response,\n                                body: <Buffer>res\n                            }));\n                            observer.complete();\n                        });\n                    })\n                    .on('error', /* istanbul ignore next */ error => observer.error(error));\n            } catch (error) {\n                observer.error(error);\n            }\n        });\n    }\n\n    /**\n     * Function to do a POST HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     */\n    post<R = any>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>this._call<R>('post', <string>uri,\n            <CoreOptions>Object.assign({}, options || {}));\n    }\n\n    /**\n     * Function to do a PUT HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     */\n    put<R = any>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>this._call<R>('put', <string>uri,\n            <CoreOptions>Object.assign({}, options || {}));\n    }\n\n    /**\n     * Function to do a PATCH HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     */\n    patch<R = any>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>this._call<R>('patch', <string>uri,\n            <CoreOptions>Object.assign({}, options || {}));\n    }\n\n    /**\n     * Function to do a DELETE HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     */\n    delete<R = any>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>this._call<R>('del', <string>uri,\n            <CoreOptions>Object.assign({}, options || {}));\n    }\n\n    /**\n     * Function to do a HEAD HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     */\n    head<R = any>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>this._call<R>('head', <string>uri,\n            <CoreOptions>Object.assign({}, options || {}));\n    }\n\n    /**\n     * Function to do a OPTIONS HTTP request\n     *\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     */\n    options<R = any>(uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>this._call<R>('options', <string>uri,\n            <CoreOptions>Object.assign({}, options || {}));\n    }\n\n    /**\n     * Function that creates a new rx cookie jar\n     *\n     * @return {Observable<RxCookieJar>}\n     */\n    jar(): Observable<RxCookieJar> {\n        return <Observable<RxCookieJar>>of(new RxCookieJar(this._request.jar()));\n    }\n\n    /**\n     * Function that creates a new cookie\n     *\n     * @param str {string}\n     *\n     * @return {Observable<Cookie>}\n     */\n    cookie(str: string): Observable<Cookie> {\n        return <Observable<Cookie>>of(this._request.cookie(<string>str));\n    }\n\n    /**\n     * Function to do a HTTP request for given method\n     *\n     * @param method {string}\n     * @param uri {string}\n     * @param options {CoreOptions}\n     *\n     * @return {Observable<RxHttpRequestResponse<R>>}\n     *\n     * @private\n     */\n    private _call<R = any>(method: string, uri: string, options?: CoreOptions): Observable<RxHttpRequestResponse<R>> {\n        return <Observable<RxHttpRequestResponse<R>>>new Observable((observer) => {\n            of([].concat(<string>uri, <CoreOptions>Object.assign({}, options || {}),\n                <RequestCallback>((error: any, response: RequestResponse, body: R) => {\n                    of(of(error))\n                        .pipe(\n                            flatMap(obsError =>\n                                merge(\n                                    obsError\n                                        .pipe(\n                                            filter(_ => !!_),\n                                            tap(err => observer.error(err))\n                                        ),\n                                    obsError\n                                        .pipe(\n                                            filter(_ => !_),\n                                            flatMap(() =>\n                                                !!response ?\n                                                    <Observable<RequestResponse>>of(response) :\n                                                    throwError(new Error('No response found'))\n                                            ),\n                                            flatMap(_ =>\n                                                of({\n                                                    response: <RequestResponse>_,\n                                                    body: <R>body\n                                                })\n                                            ),\n                                            tap(_ => observer.next(_)),\n                                            tap(() => observer.complete())\n                                        )\n                                )\n                            )\n                        )\n                        .subscribe(() => undefined, err => observer.error(err));\n                })))\n                .pipe(\n                    map(_ => this._request[<string>method].apply(<RequestAPI<Request, CoreOptions, RequiredUriUrl>>this._request, _)),\n                )\n                .subscribe(() => undefined, err => observer.error(err));\n        });\n    }\n\n    /**\n     * Function to check existing function in request API passed in parameter for a new instance\n     *\n     * @param req {RequestAPI<Request, CoreOptions, RequiredUriUrl>}\n     *\n     * @private\n     */\n    private _checkRequestParam(req: RequestAPI<Request, CoreOptions, RequiredUriUrl>) {\n        // check existing function in API\n        if (!req ||\n            Object.prototype.toString.call(req.get) !== '[object Function]' ||\n            Object.prototype.toString.call(req.head) !== '[object Function]' ||\n            Object.prototype.toString.call(req.post) !== '[object Function]' ||\n            Object.prototype.toString.call(req.put) !== '[object Function]' ||\n            Object.prototype.toString.call(req.patch) !== '[object Function]' ||\n            Object.prototype.toString.call(req.del) !== '[object Function]' ||\n            Object.prototype.toString.call(req.defaults) !== '[object Function]' ||\n            Object.prototype.toString.call(req.jar) !== '[object Function]' ||\n            Object.prototype.toString.call(req.cookie) !== '[object Function]') {\n            throw new TypeError('Parameter must be a valid `request` module API');\n        }\n    }\n}\n\n/**\n * Export {RxHttpRequest} instance\n */\nexport const RxHR: RxHttpRequest = RxHttpRequest.instance();\n\n/**\n * Export response interface\n */\nexport interface RxHttpRequestResponse<R = any> {\n    response: RequestResponse;\n    body: R;\n}\n\n/**\n * Export all initial elements\n */\nexport { RequestAPI, Request, CoreOptions, RequiredUriUrl, RequestResponse };\n"]}